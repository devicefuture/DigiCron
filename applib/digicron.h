// Autogenerated by `tools/api/builder.sh` using declarations from `tools/api/api.sh`

#ifndef DIGICRON_H_
#define DIGICRON_H_

#include <stdint.h>

#define WASM_EXPORT extern "C" __attribute__((used)) __attribute__((visibility ("default")))
#define WASM_EXPORT_AS(name) WASM_EXPORT __attribute__((export_name(name)))
#define WASM_IMPORT(module, name) __attribute__((import_module(module))) __attribute__((import_name(name)))
#define WASM_CONSTRUCTOR __attribute__((constructor))

void setup();
void loop();

typedef unsigned int _dc_Enum;
typedef unsigned int _dc_Sid;
typedef char* _dc_String;

extern "C" {

WASM_IMPORT("digicronold", "log") void dc_log(uint8_t* text, uint8_t length);
WASM_IMPORT("digicronold", "stop") void dc_stop();

WASM_IMPORT("digicron", "dc_timing_EarthTime_new") _dc_Sid dc_timing_EarthTime_new(int year, unsigned int month, unsigned int day, unsigned int hour, unsigned int minute, unsigned int second);
WASM_IMPORT("digicron", "dc_timing_EarthTime_newUsingMilliseconds") _dc_Sid dc_timing_EarthTime_newUsingMilliseconds(int year, unsigned int month, unsigned int day, unsigned long millisecondOfDay);
WASM_IMPORT("digicron", "dc_timing_EarthTime_daysInYear") unsigned int dc_timing_EarthTime_daysInYear(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_daysInMonth") unsigned int dc_timing_EarthTime_daysInMonth(_dc_Sid sid, unsigned int month);
WASM_IMPORT("digicron", "dc_timing_EarthTime_millisecondsInDay") unsigned long dc_timing_EarthTime_millisecondsInDay(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_inLeapMillisecond") bool dc_timing_EarthTime_inLeapMillisecond(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_postLeapMillisecondOffset") unsigned long dc_timing_EarthTime_postLeapMillisecondOffset(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_setDate") void dc_timing_EarthTime_setDate(_dc_Sid sid, int year, unsigned int month, unsigned int day);
WASM_IMPORT("digicron", "dc_timing_EarthTime_setTime") void dc_timing_EarthTime_setTime(_dc_Sid sid, unsigned int hour, unsigned int minute, unsigned int second);
WASM_IMPORT("digicron", "dc_timing_EarthTime_incrementTime") void dc_timing_EarthTime_incrementTime(_dc_Sid sid, int millseconds);
WASM_IMPORT("digicron", "dc_timing_EarthTime_toLocalTime") void dc_timing_EarthTime_toLocalTime(_dc_Sid sid, int timeShift);
WASM_IMPORT("digicron", "dc_timing_EarthTime_toGlobalTime") void dc_timing_EarthTime_toGlobalTime(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_year") int dc_timing_EarthTime_year(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_month") unsigned int dc_timing_EarthTime_month(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_day") unsigned int dc_timing_EarthTime_day(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_hour") unsigned int dc_timing_EarthTime_hour(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_minute") unsigned int dc_timing_EarthTime_minute(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_second") unsigned int dc_timing_EarthTime_second(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_millisecond") unsigned int dc_timing_EarthTime_millisecond(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_dayOfYear") unsigned int dc_timing_EarthTime_dayOfYear(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_millisecondOfDay") unsigned long dc_timing_EarthTime_millisecondOfDay(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_millisecondOfDayIgnoringLeap") unsigned long dc_timing_EarthTime_millisecondOfDayIgnoringLeap(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_timing_EarthTime_weekday") unsigned int dc_timing_EarthTime_weekday(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_ui_Icon_new") _dc_Sid dc_ui_Icon_new();
WASM_IMPORT("digicron", "dc_ui_Icon_setPixel") void dc_ui_Icon_setPixel(_dc_Sid sid, unsigned int x, unsigned int y, _dc_Enum value);
WASM_IMPORT("digicron", "dc_ui_Screen_new") _dc_Sid dc_ui_Screen_new();
WASM_IMPORT("digicron", "dc_ui_Screen_clear") void dc_ui_Screen_clear(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_ui_Screen_setPosition") void dc_ui_Screen_setPosition(_dc_Sid sid, unsigned int column, unsigned int row);
WASM_IMPORT("digicron", "dc_ui_Screen_setPixel") void dc_ui_Screen_setPixel(_dc_Sid sid, unsigned int x, unsigned int y, _dc_Enum value);
WASM_IMPORT("digicron", "dc_ui_Screen_printName") void dc_ui_Screen_printName(_dc_Sid sid, char c);
WASM_IMPORT("digicron", "dc_ui_Screen_print") void dc_ui_Screen_print(_dc_Sid sid, char* chars);
WASM_IMPORT("digicron", "dc_ui_Screen_printIcon") void dc_ui_Screen_printIcon(_dc_Sid sid, _dc_Sid icon);
WASM_IMPORT("digicron", "dc_ui_Screen_printRepeated") void dc_ui_Screen_printRepeated(_dc_Sid sid, _dc_String string, unsigned int times);
WASM_IMPORT("digicron", "dc_ui_Screen_scroll") void dc_ui_Screen_scroll(_dc_Sid sid, _dc_String string, unsigned int maxLength);
WASM_IMPORT("digicron", "dc_ui_Screen_resetScroll") void dc_ui_Screen_resetScroll(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_ui_Screen_rect") void dc_ui_Screen_rect(_dc_Sid sid, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, _dc_Enum value);
WASM_IMPORT("digicron", "dc_ui_Screen_filledRect") void dc_ui_Screen_filledRect(_dc_Sid sid, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, _dc_Enum value);
WASM_IMPORT("digicron", "dc_ui_Screen_open") void dc_ui_Screen_open(_dc_Sid sid, bool urgent);
WASM_IMPORT("digicron", "dc_ui_Screen_close") void dc_ui_Screen_close(_dc_Sid sid);
WASM_IMPORT("digicron", "dc_ui_Screen_swapWith") void dc_ui_Screen_swapWith(_dc_Sid sid, _dc_Sid currentScreen);
WASM_IMPORT("digicron", "dc_test_TestClass_new") _dc_Sid dc_test_TestClass_new(unsigned int seed);
WASM_IMPORT("digicron", "dc_test_TestClass_add") unsigned int dc_test_TestClass_add(_dc_Sid sid, unsigned int value, unsigned int value2);
WASM_IMPORT("digicron", "dc_test_TestClass_nextRandomNumber") unsigned int dc_test_TestClass_nextRandomNumber(_dc_Sid sid);

}

template<typename T> _dc_Sid _dc_getClassSid(T* instance) {
    return instance->_getSid();
}

int main() {}

WASM_EXPORT void _setup() {
    setup();
}

WASM_EXPORT void _loop() {
    loop();
}

namespace dc {

namespace timing {
    class EarthTime {
        private:
            _dc_Sid _sid;

        public:
            _dc_Sid _getSid() {return _sid;}

            EarthTime(int year, unsigned int month, unsigned int day, unsigned int hour, unsigned int minute, unsigned int second) {_sid = dc_timing_EarthTime_new(year, month, day, hour, minute, second);}
            EarthTime(int year, unsigned int month, unsigned int day, unsigned long millisecondOfDay) {_sid = dc_timing_EarthTime_newUsingMilliseconds(year, month, day, millisecondOfDay);}

            unsigned int daysInYear() {return dc_timing_EarthTime_daysInYear(this->_sid);}
            unsigned int daysInMonth(unsigned int month) {return dc_timing_EarthTime_daysInMonth(this->_sid, month);}
            unsigned long millisecondsInDay() {return dc_timing_EarthTime_millisecondsInDay(this->_sid);}
            bool inLeapMillisecond() {return dc_timing_EarthTime_inLeapMillisecond(this->_sid);}
            unsigned long postLeapMillisecondOffset() {return dc_timing_EarthTime_postLeapMillisecondOffset(this->_sid);}
            void setDate(int year, unsigned int month, unsigned int day) {return dc_timing_EarthTime_setDate(this->_sid, year, month, day);}
            void setTime(unsigned int hour, unsigned int minute, unsigned int second) {return dc_timing_EarthTime_setTime(this->_sid, hour, minute, second);}
            void incrementTime(int millseconds) {return dc_timing_EarthTime_incrementTime(this->_sid, millseconds);}
            void toLocalTime(int timeShift) {return dc_timing_EarthTime_toLocalTime(this->_sid, timeShift);}
            void toGlobalTime() {return dc_timing_EarthTime_toGlobalTime(this->_sid);}
            int year() {return dc_timing_EarthTime_year(this->_sid);}
            unsigned int month() {return dc_timing_EarthTime_month(this->_sid);}
            unsigned int day() {return dc_timing_EarthTime_day(this->_sid);}
            unsigned int hour() {return dc_timing_EarthTime_hour(this->_sid);}
            unsigned int minute() {return dc_timing_EarthTime_minute(this->_sid);}
            unsigned int second() {return dc_timing_EarthTime_second(this->_sid);}
            unsigned int millisecond() {return dc_timing_EarthTime_millisecond(this->_sid);}
            unsigned int dayOfYear() {return dc_timing_EarthTime_dayOfYear(this->_sid);}
            unsigned long millisecondOfDay() {return dc_timing_EarthTime_millisecondOfDay(this->_sid);}
            unsigned long millisecondOfDayIgnoringLeap() {return dc_timing_EarthTime_millisecondOfDayIgnoringLeap(this->_sid);}
            unsigned int weekday() {return dc_timing_EarthTime_weekday(this->_sid);}
    };
}

namespace ui {
    enum EventType {
        BUTTON_DOWN,
        BUTTON_UP
    };

    enum PopupTransitionState {
        NONE,
        OPENING,
        CLOSING
    };

    enum PenMode {
        OFF,
        ON
    };

    class Icon {
        private:
            _dc_Sid _sid;

        public:
            _dc_Sid _getSid() {return _sid;}

            Icon() {_sid = dc_ui_Icon_new();}

            void setPixel(unsigned int x, unsigned int y, ui::PenMode value) {return dc_ui_Icon_setPixel(this->_sid, x, y, value);}
    };

    class Screen {
        private:
            _dc_Sid _sid;

        public:
            _dc_Sid _getSid() {return _sid;}

            Screen() {_sid = dc_ui_Screen_new();}

            void clear() {return dc_ui_Screen_clear(this->_sid);}
            void setPosition(unsigned int column, unsigned int row) {return dc_ui_Screen_setPosition(this->_sid, column, row);}
            void setPixel(unsigned int x, unsigned int y, ui::PenMode value) {return dc_ui_Screen_setPixel(this->_sid, x, y, value);}
            void print(char c) {return dc_ui_Screen_printName(this->_sid, c);}
            void print(char* chars) {return dc_ui_Screen_print(this->_sid, chars);}
            void print(ui::Icon icon) {return dc_ui_Screen_printIcon(this->_sid, _dc_getClassSid<ui::Icon>(&icon));}
            void printRepeated(_dc_String string, unsigned int times) {return dc_ui_Screen_printRepeated(this->_sid, string, times);}
            void scroll(_dc_String string, unsigned int maxLength) {return dc_ui_Screen_scroll(this->_sid, string, maxLength);}
            void resetScroll() {return dc_ui_Screen_resetScroll(this->_sid);}
            void rect(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, ui::PenMode value) {return dc_ui_Screen_rect(this->_sid, x1, y1, x2, y2, value);}
            void filledRect(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, ui::PenMode value) {return dc_ui_Screen_filledRect(this->_sid, x1, y1, x2, y2, value);}
            void open(bool urgent) {return dc_ui_Screen_open(this->_sid, urgent);}
            void close() {return dc_ui_Screen_close(this->_sid);}
            void swapWith(ui::Screen* currentScreen) {return dc_ui_Screen_swapWith(this->_sid, _dc_getClassSid<ui::Screen>(currentScreen));}
    };
}

namespace test {
    class TestClass {
        private:
            _dc_Sid _sid;

        public:
            _dc_Sid _getSid() {return _sid;}

            TestClass(unsigned int seed) {_sid = dc_test_TestClass_new(seed);}

            unsigned int add(unsigned int value, unsigned int value2) {return dc_test_TestClass_add(this->_sid, value, value2);}
            unsigned int nextRandomNumber() {return dc_test_TestClass_nextRandomNumber(this->_sid);}
    };
}

}

#endif
