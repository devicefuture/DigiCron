// Autogenerated by `tools/api/builder.sh` using declarations from `tools/api/api.sh`

#include <Arduino.h>
#include <m3_env.h>

#include "_api.h"
#include "proc.h"
#include "datatypes.h"
#include "timing.h"
#include "input.h"
#include "ui.h"
#include "test.h"

dataTypes::List<api::StoredInstance> api::storedInstances;

template<typename T> T* api::getBySid(api::Type type, api::Sid sid) {
    StoredInstance* storedInstance = storedInstances[sid];

    if (!storedInstance || (storedInstance->type != type && !(
        (type == Type::timing_Time && storedInstance->type == Type::timing_EarthTime) ||
        (type == Type::test_TestClass && storedInstance->type == Type::test_TestSubclass) ||
        false
    ))) {
        Serial.println("Inheritance check failed");

        return new T(); // To ensure an object is always referenced
    }

    return (T*)storedInstance->instance;
}

api::Sid api::findOwnSid(void* instance) {
    storedInstances.start();

    unsigned int index = 0;

    while (auto storedInstance = storedInstances.next()) {
        if (storedInstance->instance == instance) {
            return index;
        }

        index++;
    }

    return -1;
}

template<typename T> api::Sid api::store(api::Type type, proc::Process* ownerProcess, T* instance) {
    StoredInstance* storedInstance = nullptr;
    bool foundStoredInstance = false;
    unsigned int index = 0;

    storedInstances.start();

    while ((storedInstance = storedInstances.next())) {
        if (storedInstance->type == Type::EMPTY) {
            foundStoredInstance = true;
            break;
        }

        index++;
    }

    if (!storedInstance) {
        storedInstance = new StoredInstance();
    }

    storedInstance->type = type;
    storedInstance->ownerProcess = ownerProcess;
    storedInstance->instance = instance;

    if (foundStoredInstance) {
        return index;
    } else {
        return storedInstances.push(storedInstance) - 1;
    }
}

void deleteStoredInstance(api::StoredInstance* storedInstance) {
    if (!storedInstance || storedInstance->type == api::Type::EMPTY) {
        return;
    }

    switch (storedInstance->type) {
        case api::Type::timing_Time: delete (timing::Time*)storedInstance->instance; break;
        case api::Type::timing_EarthTime: delete (timing::EarthTime*)storedInstance->instance; break;
        case api::Type::ui_Icon: delete (ui::Icon*)storedInstance->instance; break;
        case api::Type::ui_Screen: delete (ui::Screen*)storedInstance->instance; break;
        case api::Type::test_TestClass: delete (test::TestClass*)storedInstance->instance; break;
        case api::Type::test_TestSubclass: delete (test::TestSubclass*)storedInstance->instance; break;
        default: delete storedInstance->instance; break;
    }

    storedInstance->type = api::Type::EMPTY;
    storedInstance->ownerProcess = nullptr;
    storedInstance->instance = nullptr;
}

void api::deleteBySid(api::Sid sid) {
    deleteStoredInstance(storedInstances[sid]);
}

void api::deleteAllByOwnerProcess(proc::Process* ownerProcess) {
    storedInstances.start();

    while (auto storedInstance = storedInstances.next()) {
        if (storedInstance->type == Type::EMPTY || storedInstance->ownerProcess != ownerProcess) {
            continue;
        }

        deleteStoredInstance(storedInstance);
    }
}

m3ApiRawFunction(api::dc_getGlobalI32) {
    m3ApiReturnType(uint32_t)
    m3ApiGetArgMem(char*, id)

    IM3Global global = m3_FindGlobal(runtime->modules, id);

    if (global) {
        M3TaggedValue globalValue;

        m3_GetGlobal(global, &globalValue);

        m3ApiReturn(globalValue.value.i32);
    } else {
        m3ApiReturn(0);
    }
}

m3ApiRawFunction(api::dc_deleteBySid) {
    m3ApiGetArg(Sid, _sid)

    api::deleteBySid(_sid);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_timing_Time_new) {
    m3ApiReturnType(Sid)

    auto instance = new timing::Time();

    Sid result = api::store<timing::Time>(Type::timing_Time, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_newUsingDate) {
    m3ApiReturnType(Sid)
    m3ApiGetArg(int, year)
    m3ApiGetArg(unsigned int, month)
    m3ApiGetArg(unsigned int, day)
    m3ApiGetArg(unsigned int, hour)
    m3ApiGetArg(unsigned int, minute)
    m3ApiGetArg(unsigned int, second)

    auto instance = new timing::Time(year, month, day, hour, minute, second);

    Sid result = api::store<timing::Time>(Type::timing_Time, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_newUsingMilliseconds) {
    m3ApiReturnType(Sid)
    m3ApiGetArg(int, year)
    m3ApiGetArg(unsigned int, month)
    m3ApiGetArg(unsigned int, day)
    m3ApiGetArg(unsigned long, millisecondOfDay)

    auto instance = new timing::Time(year, month, day, millisecondOfDay);

    Sid result = api::store<timing::Time>(Type::timing_Time, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_daysInYear) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->daysInYear();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_daysInMonth) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(unsigned int, month)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->daysInMonth(month);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_millisecondsInDay) {
    m3ApiReturnType(unsigned long)
    m3ApiGetArg(Sid, _sid)

    unsigned long result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->millisecondsInDay();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_inLeapMillisecond) {
    m3ApiReturnType(bool)
    m3ApiGetArg(Sid, _sid)

    bool result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->inLeapMillisecond();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_postLeapMillisecondOffset) {
    m3ApiReturnType(unsigned long)
    m3ApiGetArg(Sid, _sid)

    unsigned long result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->postLeapMillisecondOffset();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_setDate) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(int, year)
    m3ApiGetArg(unsigned int, month)
    m3ApiGetArg(unsigned int, day)

    api::getBySid<timing::Time>(Type::timing_Time, _sid)->setDate(year, month, day);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_timing_Time_setTime) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(unsigned int, hour)
    m3ApiGetArg(unsigned int, minute)
    m3ApiGetArg(unsigned int, second)

    api::getBySid<timing::Time>(Type::timing_Time, _sid)->setTime(hour, minute, second);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_timing_Time_incrementTime) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(int, millseconds)

    api::getBySid<timing::Time>(Type::timing_Time, _sid)->incrementTime(millseconds);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_timing_Time_toLocalTime) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(int, timeShift)

    api::getBySid<timing::Time>(Type::timing_Time, _sid)->toLocalTime(timeShift);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_timing_Time_toGlobalTime) {
    m3ApiGetArg(Sid, _sid)

    api::getBySid<timing::Time>(Type::timing_Time, _sid)->toGlobalTime();

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_timing_Time_timeShift) {
    m3ApiReturnType(int)
    m3ApiGetArg(Sid, _sid)

    int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->timeShift();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_year) {
    m3ApiReturnType(int)
    m3ApiGetArg(Sid, _sid)

    int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->year();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_month) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->month();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_day) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->day();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_hour) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->hour();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_minute) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->minute();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_second) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->second();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_millisecond) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->millisecond();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_dayOfYear) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->dayOfYear();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_millisecondOfDay) {
    m3ApiReturnType(unsigned long)
    m3ApiGetArg(Sid, _sid)

    unsigned long result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->millisecondOfDay();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_millisecondOfDayIgnoringLeap) {
    m3ApiReturnType(unsigned long)
    m3ApiGetArg(Sid, _sid)

    unsigned long result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->millisecondOfDayIgnoringLeap();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_Time_weekday) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<timing::Time>(Type::timing_Time, _sid)->weekday();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_EarthTime_new) {
    m3ApiReturnType(Sid)

    auto instance = new timing::EarthTime();

    Sid result = api::store<timing::EarthTime>(Type::timing_EarthTime, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_EarthTime_newUsingDate) {
    m3ApiReturnType(Sid)
    m3ApiGetArg(int, year)
    m3ApiGetArg(unsigned int, month)
    m3ApiGetArg(unsigned int, day)
    m3ApiGetArg(unsigned int, hour)
    m3ApiGetArg(unsigned int, minute)
    m3ApiGetArg(unsigned int, second)

    auto instance = new timing::EarthTime(year, month, day, hour, minute, second);

    Sid result = api::store<timing::EarthTime>(Type::timing_EarthTime, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_EarthTime_newUsingMilliseconds) {
    m3ApiReturnType(Sid)
    m3ApiGetArg(int, year)
    m3ApiGetArg(unsigned int, month)
    m3ApiGetArg(unsigned int, day)
    m3ApiGetArg(unsigned long, millisecondOfDay)

    auto instance = new timing::EarthTime(year, month, day, millisecondOfDay);

    Sid result = api::store<timing::EarthTime>(Type::timing_EarthTime, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_timing_EarthTime_syncToSystemTime) {
    m3ApiGetArg(Sid, _sid)

    api::getBySid<timing::EarthTime>(Type::timing_EarthTime, _sid)->syncToSystemTime();

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Icon_new) {
    m3ApiReturnType(Sid)

    auto instance = new ui::Icon();

    Sid result = api::store<ui::Icon>(Type::ui_Icon, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_ui_Icon_setPixel) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(unsigned int, x)
    m3ApiGetArg(unsigned int, y)
    m3ApiGetArg(unsigned int, value)

    api::getBySid<ui::Icon>(Type::ui_Icon, _sid)->setPixel(x, y, (ui::PenMode)value);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_new) {
    m3ApiReturnType(Sid)

    auto instance = new ui::Screen((proc::WasmProcess*)runtime->userdata);

    Sid result = api::store<ui::Screen>(Type::ui_Screen, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_ui_Screen_clear) {
    m3ApiGetArg(Sid, _sid)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->clear();

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_setPosition) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(unsigned int, column)
    m3ApiGetArg(unsigned int, row)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->setPosition(column, row);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_setPixel) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(unsigned int, x)
    m3ApiGetArg(unsigned int, y)
    m3ApiGetArg(unsigned int, value)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->setPixel(x, y, (ui::PenMode)value);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_printChar) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(char, c)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->print(c);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_print) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArgMem(char*, chars)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->print(chars);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_printIcon) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(Sid, icon)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->print(api::getBySid<ui::Icon>(Type::ui_Icon, icon));

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_printRepeated) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArgMem(char*, string)
    m3ApiGetArg(unsigned int, times)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->printRepeated(String(string), times);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_scroll) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArgMem(char*, string)
    m3ApiGetArg(unsigned int, maxLength)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->scroll(String(string), maxLength);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_resetScroll) {
    m3ApiGetArg(Sid, _sid)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->resetScroll();

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_rect) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(unsigned int, x1)
    m3ApiGetArg(unsigned int, y1)
    m3ApiGetArg(unsigned int, x2)
    m3ApiGetArg(unsigned int, y2)
    m3ApiGetArg(unsigned int, value)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->rect(x1, y1, x2, y2, (ui::PenMode)value);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_filledRect) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(unsigned int, x1)
    m3ApiGetArg(unsigned int, y1)
    m3ApiGetArg(unsigned int, x2)
    m3ApiGetArg(unsigned int, y2)
    m3ApiGetArg(unsigned int, value)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->filledRect(x1, y1, x2, y2, (ui::PenMode)value);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_open) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(bool, urgent)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->open(urgent);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_close) {
    m3ApiGetArg(Sid, _sid)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->close();

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_ui_Screen_swapWith) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(Sid, currentScreen)

    api::getBySid<ui::Screen>(Type::ui_Screen, _sid)->swapWith(api::getBySid<ui::Screen>(Type::ui_Screen, currentScreen));

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_test_TestClass_new) {
    m3ApiReturnType(Sid)
    m3ApiGetArg(unsigned int, seed)

    auto instance = new test::TestClass(seed);

    Sid result = api::store<test::TestClass>(Type::test_TestClass, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_test_TestClass_identify) {
    m3ApiGetArg(Sid, _sid)

    api::getBySid<test::TestClass>(Type::test_TestClass, _sid)->identify();

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_test_TestClass_add) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(unsigned int, value)
    m3ApiGetArg(unsigned int, value2)

    unsigned int result = api::getBySid<test::TestClass>(Type::test_TestClass, _sid)->add(value, value2);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_test_TestClass_bools) {
    m3ApiGetArg(Sid, _sid)
    m3ApiGetArg(bool, a)
    m3ApiGetArg(bool, b)
    m3ApiGetArg(bool, c)

    api::getBySid<test::TestClass>(Type::test_TestClass, _sid)->bools(a, b, c);

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_test_TestClass_nextRandomNumber) {
    m3ApiReturnType(unsigned int)
    m3ApiGetArg(Sid, _sid)

    unsigned int result = api::getBySid<test::TestClass>(Type::test_TestClass, _sid)->nextRandomNumber();

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_test_TestSubclass_new) {
    m3ApiReturnType(Sid)
    m3ApiGetArg(unsigned int, seed)

    auto instance = new test::TestSubclass(seed);

    Sid result = api::store<test::TestSubclass>(Type::test_TestSubclass, (proc::WasmProcess*)runtime->userdata, instance);

    m3ApiReturn(result);
}

m3ApiRawFunction(api::dc_test_TestSubclass_identify) {
    m3ApiGetArg(Sid, _sid)

    api::getBySid<test::TestSubclass>(Type::test_TestSubclass, _sid)->identify();

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_test_TestSubclass_subclass) {
    m3ApiGetArg(Sid, _sid)

    api::getBySid<test::TestSubclass>(Type::test_TestSubclass, _sid)->subclass();

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_test_sayHello) {
    test::sayHello();

    m3ApiSuccess();
}

m3ApiRawFunction(api::dc_test_add) {
    m3ApiReturnType(int)
    m3ApiGetArg(int, a)
    m3ApiGetArg(int, b)

    int result = test::add(a, b);

    m3ApiReturn(result);
}

void api::linkFunctions(IM3Runtime runtime) {
    const char* MODULE_NAME = "digicron";

    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_getGlobalI32", "i(*)", &dc_getGlobalI32);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_deleteBySid", "v(i)", &dc_deleteBySid);

    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_new", "i()", &dc_timing_Time_new);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_newUsingDate", "i(iiiiii)", &dc_timing_Time_newUsingDate);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_newUsingMilliseconds", "i(iiii)", &dc_timing_Time_newUsingMilliseconds);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_daysInYear", "i(i)", &dc_timing_Time_daysInYear);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_daysInMonth", "i(ii)", &dc_timing_Time_daysInMonth);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_millisecondsInDay", "i(i)", &dc_timing_Time_millisecondsInDay);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_inLeapMillisecond", "i(i)", &dc_timing_Time_inLeapMillisecond);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_postLeapMillisecondOffset", "i(i)", &dc_timing_Time_postLeapMillisecondOffset);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_setDate", "v(iiii)", &dc_timing_Time_setDate);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_setTime", "v(iiii)", &dc_timing_Time_setTime);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_incrementTime", "v(ii)", &dc_timing_Time_incrementTime);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_toLocalTime", "v(ii)", &dc_timing_Time_toLocalTime);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_toGlobalTime", "v(i)", &dc_timing_Time_toGlobalTime);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_timeShift", "i(i)", &dc_timing_Time_timeShift);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_year", "i(i)", &dc_timing_Time_year);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_month", "i(i)", &dc_timing_Time_month);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_day", "i(i)", &dc_timing_Time_day);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_hour", "i(i)", &dc_timing_Time_hour);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_minute", "i(i)", &dc_timing_Time_minute);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_second", "i(i)", &dc_timing_Time_second);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_millisecond", "i(i)", &dc_timing_Time_millisecond);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_dayOfYear", "i(i)", &dc_timing_Time_dayOfYear);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_millisecondOfDay", "i(i)", &dc_timing_Time_millisecondOfDay);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_millisecondOfDayIgnoringLeap", "i(i)", &dc_timing_Time_millisecondOfDayIgnoringLeap);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_Time_weekday", "i(i)", &dc_timing_Time_weekday);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_EarthTime_new", "i()", &dc_timing_EarthTime_new);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_EarthTime_newUsingDate", "i(iiiiii)", &dc_timing_EarthTime_newUsingDate);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_EarthTime_newUsingMilliseconds", "i(iiii)", &dc_timing_EarthTime_newUsingMilliseconds);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_timing_EarthTime_syncToSystemTime", "v(i)", &dc_timing_EarthTime_syncToSystemTime);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Icon_new", "i()", &dc_ui_Icon_new);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Icon_setPixel", "v(iiii)", &dc_ui_Icon_setPixel);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_new", "i()", &dc_ui_Screen_new);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_clear", "v(i)", &dc_ui_Screen_clear);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_setPosition", "v(iii)", &dc_ui_Screen_setPosition);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_setPixel", "v(iiii)", &dc_ui_Screen_setPixel);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_printChar", "v(ii)", &dc_ui_Screen_printChar);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_print", "v(i*)", &dc_ui_Screen_print);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_printIcon", "v(ii)", &dc_ui_Screen_printIcon);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_printRepeated", "v(iii)", &dc_ui_Screen_printRepeated);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_scroll", "v(iii)", &dc_ui_Screen_scroll);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_resetScroll", "v(i)", &dc_ui_Screen_resetScroll);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_rect", "v(iiiiii)", &dc_ui_Screen_rect);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_filledRect", "v(iiiiii)", &dc_ui_Screen_filledRect);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_open", "v(ii)", &dc_ui_Screen_open);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_close", "v(i)", &dc_ui_Screen_close);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_ui_Screen_swapWith", "v(ii)", &dc_ui_Screen_swapWith);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_TestClass_new", "i(i)", &dc_test_TestClass_new);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_TestClass_identify", "v(i)", &dc_test_TestClass_identify);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_TestClass_add", "i(iii)", &dc_test_TestClass_add);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_TestClass_bools", "v(iiii)", &dc_test_TestClass_bools);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_TestClass_nextRandomNumber", "i(i)", &dc_test_TestClass_nextRandomNumber);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_TestSubclass_new", "i(i)", &dc_test_TestSubclass_new);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_TestSubclass_identify", "v(i)", &dc_test_TestSubclass_identify);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_TestSubclass_subclass", "v(i)", &dc_test_TestSubclass_subclass);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_sayHello", "v()", &dc_test_sayHello);
    m3_LinkRawFunction(runtime->modules, MODULE_NAME, "dc_test_add", "i(ii)", &dc_test_add);
}
