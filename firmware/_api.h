// Autogenerated by `tools/api/builder.sh` using declarations from `tools/api/api.sh`

#ifndef API_H_
#define API_H_

#include <wasm3.h>

#include "timing.h"
#include "ui.h"
#include "test.h"

namespace api {
    typedef unsigned int Sid;

    enum Type {timing_EarthTime, ui_Icon, ui_Screen, test_TestClass};

    struct StoredInstance {
        Type type;
        void* instance;
    };

    extern dataTypes::List<StoredInstance> storedInstances;

    template<typename T> T* getBySid(Type type, Sid sid);
    template<typename T> Sid store(Type type, T* instance);

    m3ApiRawFunction(dc_timing_EarthTime_new);
    m3ApiRawFunction(dc_timing_EarthTime_newUsingMilliseconds);
    m3ApiRawFunction(dc_timing_EarthTime_daysInYear);
    m3ApiRawFunction(dc_timing_EarthTime_daysInMonth);
    m3ApiRawFunction(dc_timing_EarthTime_millisecondsInDay);
    m3ApiRawFunction(dc_timing_EarthTime_inLeapMillisecond);
    m3ApiRawFunction(dc_timing_EarthTime_postLeapMillisecondOffset);
    m3ApiRawFunction(dc_timing_EarthTime_setDate);
    m3ApiRawFunction(dc_timing_EarthTime_setTime);
    m3ApiRawFunction(dc_timing_EarthTime_incrementTime);
    m3ApiRawFunction(dc_timing_EarthTime_toLocalTime);
    m3ApiRawFunction(dc_timing_EarthTime_toGlobalTime);
    m3ApiRawFunction(dc_timing_EarthTime_year);
    m3ApiRawFunction(dc_timing_EarthTime_month);
    m3ApiRawFunction(dc_timing_EarthTime_day);
    m3ApiRawFunction(dc_timing_EarthTime_hour);
    m3ApiRawFunction(dc_timing_EarthTime_minute);
    m3ApiRawFunction(dc_timing_EarthTime_second);
    m3ApiRawFunction(dc_timing_EarthTime_millisecond);
    m3ApiRawFunction(dc_timing_EarthTime_dayOfYear);
    m3ApiRawFunction(dc_timing_EarthTime_millisecondOfDay);
    m3ApiRawFunction(dc_timing_EarthTime_millisecondOfDayIgnoringLeap);
    m3ApiRawFunction(dc_timing_EarthTime_weekday);
    m3ApiRawFunction(dc_ui_Icon_new);
    m3ApiRawFunction(dc_ui_Icon_setPixel);
    m3ApiRawFunction(dc_ui_Screen_new);
    m3ApiRawFunction(dc_ui_Screen_clear);
    m3ApiRawFunction(dc_ui_Screen_setPosition);
    m3ApiRawFunction(dc_ui_Screen_setPixel);
    m3ApiRawFunction(dc_ui_Screen_printName);
    m3ApiRawFunction(dc_ui_Screen_print);
    m3ApiRawFunction(dc_ui_Screen_printIcon);
    m3ApiRawFunction(dc_ui_Screen_printRepeated);
    m3ApiRawFunction(dc_ui_Screen_scroll);
    m3ApiRawFunction(dc_ui_Screen_resetScroll);
    m3ApiRawFunction(dc_ui_Screen_rect);
    m3ApiRawFunction(dc_ui_Screen_filledRect);
    m3ApiRawFunction(dc_ui_Screen_open);
    m3ApiRawFunction(dc_ui_Screen_close);
    m3ApiRawFunction(dc_ui_Screen_swapWith);
    m3ApiRawFunction(dc_test_TestClass_new);
    m3ApiRawFunction(dc_test_TestClass_add);
    m3ApiRawFunction(dc_test_TestClass_nextRandomNumber);

    void linkFunctions(IM3Runtime runtime);
}

#endif
