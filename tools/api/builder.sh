#!/bin/bash

echo "Running API builder..."

export NAMESPACE=
export ENUM=
export CLASS=
export LAST_NAMESPACE_MEMBER=
export HAD_CONSTRUCTOR=false

function _closeNamespace {
    if [ "$NAMESPACE" != "" ]; then
        _closeClass

        echo } >> applib/digicron.h
        echo >> applib/digicron.h

        export NAMESPACE=
        export LAST_NAMESPACE_MEMBER=
    fi
}

function namespace {
    _closeNamespace

    export NAMESPACE=$1

    echo namespace $NAMESPACE { >> applib/digicron.h
    echo Including namespace: dc::$NAMESPACE
}

function enum {
    if [ "$LAST_NAMESPACE_MEMBER" != "" ]; then
        echo "" >> applib/digicron.h
    fi

    export LAST_NAMESPACE_MEMBER=$1

    echo "    enum $1 {" >> applib/digicron.h
    echo -n "Including enum: dc::$NAMESPACE::$1 {"

    shift

    while (($#)); do
        echo -n "        $1" >> applib/digicron.h
        echo -n $1

        shift

        if (($#)); then
            echo "," >> applib/digicron.h
            echo -n ", "
        fi
    done

    echo >> applib/digicron.h
    echo "    };" >> applib/digicron.h
    echo "}"
}

function _closeClass {
    if [ "$CLASS" != "" ]; then
        echo "    };" >> applib/digicron.h

        export CLASS=
    fi
}

function class {
    _closeClass

    if [ "$LAST_NAMESPACE_MEMBER" != "" ]; then
        echo "" >> applib/digicron.h
    fi

    export CLASS=$1
    export LAST_NAMESPACE_MEMBER=$1
    export HAD_CONSTRUCTOR=false

    (
    echo "    class $CLASS {"
    echo "        private:"
    echo "            _dc_Sid _sid;"
    echo
    echo "        public:"
    echo "            _dc_Sid _getSid() {return _sid;}"
    echo
    ) >> applib/digicron.h
    echo Including class: dc::$NAMESPACE::$CLASS
}

function method {
    if [ "$INTERNAL_NAME" = "" ]; then
        local INTERNAL_NAME=dc_${NAMESPACE}_${CLASS}_$2
    fi

    NAME="$1 $2"

    if [ "$IN_CONSTRUCTOR" = true ]; then
        NAME=$1
    elif [ "$HAD_CONSTRUCTOR" = true ]; then
        echo >> applib/digicron.h

        export HAD_CONSTRUCTOR=false
    fi

    echo -n "            $NAME(" >> applib/digicron.h

    if [ "$IN_CONSTRUCTOR" = true ]; then
        passArgs=

        echo -n "WASM_IMPORT(\"digicron\", \"$INTERNAL_NAME\") _dc_Sid $INTERNAL_NAME(" >> applib/_digicron-imports.h
    
        shift
    else
        passArgs="this->_sid"

        echo -n "WASM_IMPORT(\"digicron\", \"$INTERNAL_NAME\") $1 $INTERNAL_NAME(_dc_Sid sid" >> applib/_digicron-imports.h

        shift
        shift

        if (($#)); then
            echo -n ", " >> applib/_digicron-imports.h
            passArgs="$passArgs, "
        fi
    fi

    echo -n "Including class method: $1 dc::$NAMESPACE::$CLASS::$2("

    while (($#)); do
        argType=$1
        internalArgType=$argType
        argName=$2
        internalArgCall=$argName

        if [[ "$argType" =~ ^ENUM\  ]]; then
            argType=${argType##ENUM }
            internalArgType=_dc_Enum
        fi

        if [[ "$argType" =~ ^CLASS\  ]]; then
            argType=${argType##CLASS }
            internalArgType=_dc_Sid
            internalArgCall="_dc_getClassSid<$argType>(&$argName)"
        fi

        if [[ "$argType" =~ ^CLASSPTR\  ]]; then
            argType=${argType##CLASSPTR }
            internalArgType=_dc_Sid
            internalArgCall="_dc_getClassSid<$argType>($argName)"
            argType="$argType*"
        fi

        if [ "$argType" = "STRING" ]; then
            argType=_dc_String
            internalArgType=_dc_String
        fi

        echo -n "$argType $argName" >> applib/digicron.h
        echo -n "$internalArgType $argName" >> applib/_digicron-imports.h
        passArgs="$passArgs$internalArgCall"
        echo -n "$argType $argName"

        shift
        shift

        if (($#)); then
            echo -n ", " >> applib/digicron.h
            echo -n ", " >> applib/_digicron-imports.h
            passArgs="$passArgs, "
            echo -n ", "
        fi
    done

    if [ "$IN_CONSTRUCTOR" = true ]; then
        echo ") {_sid = $INTERNAL_NAME($passArgs);}" >> applib/digicron.h
    else
        echo ") {return $INTERNAL_NAME($passArgs);}" >> applib/digicron.h
    fi

    echo ");" >> applib/_digicron-imports.h
    echo ")"
}

function constructor {
    if [ "$INTERNAL_NAME" = "" ]; then
        local INTERNAL_NAME=dc_${NAMESPACE}_${CLASS}_new
    fi

    IN_CONSTRUCTOR=true INTERNAL_NAME=$INTERNAL_NAME method $CLASS "$@"

    export HAD_CONSTRUCTOR=true
}

> firmware/_api.cpp
> firmware/_api.h

mkdir -p applib

> applib/_digicron-imports.h
> applib/digicron.h
> applib/digicron.syms

tee -a applib/digicron.h > /dev/null << EOF
// Autogenerated by \`tools/api/builder.sh\`

#ifndef DIGICRON_H_
#define DIGICRON_H_

#include <stdint.h>

#define WASM_EXPORT extern "C" __attribute__((used)) __attribute__((visibility ("default")))
#define WASM_EXPORT_AS(name) WASM_EXPORT __attribute__((export_name(name)))
#define WASM_IMPORT(module, name) __attribute__((import_module(module))) __attribute__((import_name(name)))
#define WASM_CONSTRUCTOR __attribute__((constructor))

void setup();
void loop();

typedef unsigned int _dc_Enum;
typedef unsigned int _dc_Sid;
typedef char* _dc_String;

extern "C" {

WASM_IMPORT("digicron", "log") void dc_log(uint8_t* text, uint8_t length);
WASM_IMPORT("digicron", "stop") void dc_stop();

// {{ imports }}

}

template<typename T> _dc_Sid _dc_getClassSid(T* instance) {
    return instance->_getSid();
}

WASM_EXPORT void _start() {
    setup();
}

WASM_EXPORT void _step() {
    loop();
}

namespace dc {

EOF

export -f _closeNamespace namespace _closeClass class method constructor

. tools/api/api.sh

_closeNamespace

tee -a applib/digicron.h > /dev/null << EOF
}
#endif
EOF

sed -i -e "\|// {{ imports }}|{r applib/_digicron-imports.h" -e "d}" applib/digicron.h